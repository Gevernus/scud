require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require("cors");
const helmet = require('helmet');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const User = require('./models/User');
const Event = require('./models/Event');
const Station = require('./models/Station')
const Session = require('./models/Session')
const Counterparty = require('./models/Counterparty')
const Registration = require('./models/Registration')
const LockUsers = require('./models/LockUsers')
const { startOfDay, endOfDay, startOfWeek, startOfMonth, toDate } = require("date-fns");
const { checkPermissionsMiddleware, PERMISSIONS_MODULES } = require("./permissions");
const bcrypt = require('bcryptjs')
const { v4: uuidv4 } = require('uuid'); // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID


const app = express();
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"], // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            scriptSrc: ["'self'", "https://telegram.org"], // –†–∞–∑—Ä–µ—à–∞–µ–º Telegram Login
            imgSrc: ["'self'", "data:", "https://telegram.org"], // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ Telegram
            frameAncestors: ["'none'"], // –ó–∞—â–∏—Ç–∞ –æ—Ç Clickjacking
        },
    },
    referrerPolicy: { policy: "strict-origin-when-cross-origin" }, // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–¥—ë—Ç –Ω–∞ –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω.
    frameguard: { action: "deny" }, // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ iframe
}));
app.use(cors({
    exposedHeaders: ['Content-Range']
}));
app.use(express.json());

// MongoDB connection
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error(err));

app.post("/api/front/users/lock", async (req, res) => {
    const { telegramId, firstName, lastName, username } = req.body;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        const existingUser = await LockUsers.findOne({ telegramId });
        console.log(existingUser)
        if (existingUser) {
            return res.status(403).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω." });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const blockedUser = new LockUsers({
            telegramId,
            firstName,
            lastName,
            username,
        });

        await blockedUser.save();
        // –õ–æ–≥–∏—Ä—É–µ–º 
        await registerEvent({
            eventType: "incident",
            description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} (username: ${username}) —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º ID ${telegramId} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
        });

        console.log(`üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${telegramId}) –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);

        return res.status(200).json({ message: "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫." });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏." });
    }
});

app.post("/api/front/users", async (req, res) => {
    const { telegramId, firstName, lastName, username, password, deviceId } = req.body;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        const userCount = await User.countDocuments();
        let user = await User.findOne({ telegramId });
        const registration = await Registration.findOne();
        const lockedUser = await LockUsers.findOne({ telegramId });
        
        if (lockedUser) {
            return res.status(200).json({ isBlocked: true });
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (user) {
            if (!user.deviceId || user.deviceId !== deviceId) {
                user.deviceId = deviceId;
                await user.save();

                await registerEvent({
                    eventType: "incident",
                    description: `Id —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username} c Id ${user._id} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.`
                });
            }
            return res.status(200).json({ exists: true, user });
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞
        if (userCount === 0) {
            user = new User({
                telegramId,
                firstName,
                lastName,
                username,
                permissions: 98303, // –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                deviceId,
            });
            await user.save();
            return res.status(201).json({ exists: true, user });
        }

        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞
        if (!registration || !registration.status) {
            return res.status(200).json({ exists: false, registrationAllowed: false });
        }

        const existingUsername = await User.findOne({ username });
        if (existingUsername) {
            return res.status(409).json({ error: `Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}" —É–∂–µ –∑–∞–Ω—è—Ç–æ` });
        }

        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –Ω–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –µ–≥–æ
        if (!password) {
            return res.status(200).json({ exists: false, registrationAllowed: true });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const isPasswordValid = password === registration.pass;
        if (!isPasswordValid) {
            await registerEvent({
                eventType: "incident",
                description: `–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${firstName} ${lastName} (username: ${username}, telegrammID: ${telegramId})`
            });
            return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = new User({ telegramId, firstName, lastName, username, deviceId });
        await user.save();

        return res.status(201).json({ exists: true, user });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ /api/front/users:", error);
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

//–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–∏
app.post("/api/admin/auth/check", async (req, res) => {
    const { telegramId } = req.body;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        const user = await User.findOne({ telegramId });

        if (!user) {
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(user);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


const haversine = (lat1, lon1, lat2, lon2) => {
    const toRad = (value) => (value * Math.PI) / 180;
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);

    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
};

const decodeQRData = (encryptedPayload) => {
    try {
        // Decode base64 to UTF-8 string
        const jsonString = Buffer.from(encryptedPayload, 'base64').toString('utf-8');

        // Parse the JSON string
        const payload = JSON.parse(jsonString);

        return {
            deviceId: payload.DeviceId,
            sessionId: payload.SessionId
        };
    } catch (error) {
        throw new Error(`Invalid QR data format: ${error.message} with qr data ${encryptedPayload}`);
    }
};

app.get('/api/qr', async (req, res) => {
    try {
        const { deviceId, sessionId } = req.query;
        console.log(`Request: ${deviceId}:${sessionId}`);
        // Find the device
        const station = await Station.findOne({ deviceId, deleted: false });
        if (!station) {
            return res.status(404).json({
                status: 'device_not_found',
                message: '–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞',
                username: '',
                password: ''
            });
        }

        // Check for approved session
        const session = await Session.findOne({
            sessionId,
            deviceId,
            status: 'approved'
        });

        if (!session) {
            console.log(`Session not found`);
            return res.status(200).json({
                status: 'pending',
                message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏',
                username: '',
                password: ''
            });
        }
        console.log(`Session found`);
        // Return credentials for approved session
        return res.status(200).json({
            status: 'approved',
            message: 'Session approved',
            username: station.username,
            password: station.password
        });
    } catch (error) {
        console.error('Error in /api/qr:', error);
        res.status(500).json({
            status: 'error',
            message: 'Internal server error',
            username: '',
            password: ''
        });
    }
});

app.post('/api/qr/scan', async (req, res) => {
    const { qrData, location, userId } = req.body;

    // Decode base64 QR data
    const { deviceId, sessionId } = decodeQRData(qrData);
    try {        
        const station = await Station.findOne({ deviceId, deleted: false }).populate('users');

        if (!station) {
            console.log(`Station not found`);
            return res.status(200).json({
                status: 'device_not_found',
                message: '–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç–∞–Ω—Ü–∏—é'
            });
        }      
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const user = await User.findOne({ _id: userId });

        if (!user) {
            console.log(`User not found`);
            return res.status(403).json({
                status: 'user_not_found',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ users —Å—Ç–∞–Ω—Ü–∏–∏
        const isUserAllowed = station.users.some(stationUser => stationUser._id.equals(user._id));

        if (!isUserAllowed) {
            console.log(`User ${userId} is not allowed to access station ${deviceId}`);

            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "incident"
            await registerEvent({
                eventType: "incident",
                description: `–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ${deviceId} - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.`
            });

            return res.status(403).json({
                status: 'access_denied',
                message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        const [stationLat, stationLon] = station.location.split(',').map(parseFloat);
        const [latitude, longitude] = location.split(',').map(parseFloat);

        const distance = haversine(stationLat, stationLon, latitude, longitude);
        const maxAllowedDistance = 0.05; // 50 –º–µ—Ç—Ä–æ–≤

        if (distance > maxAllowedDistance) {
            console.log(`Location mismatch: ${distance.toFixed(3)} km`);

            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ incident"
            await registerEvent({
                eventType: "incident",
                description: `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏  ${deviceId} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(3)} km`
            });

            return res.status(200).json({
                status: 'location_mismatch',
                message: `–õ–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(3)} –∫–º`
            });
        }

        const session = new Session({
            deviceId,
            sessionId,
            userId,
            location,
            status: 'approved',
            createdAt: new Date()
        });
        await session.save();

        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "authorization"
        await registerEvent({
            eventType: "authorization",
            description: `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ${deviceId}.`
        });

        console.log(`Session created ${sessionId}:${deviceId}`);
        return res.status(200).json({
            status: 'success',
            message: '–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        });
    } catch (error) {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "incident"
        await registerEvent({
            eventType: "incident",
            description: `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ${deviceId} –Ω–µ —É–¥–∞–ª–∞—Å—å.`
        });
        console.error('Error in /api/qr/scan:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR'
        });
    }
});

app.post('/api/qr/add', async (req, res) => {
    const { qrData, location, username, password } = req.body;

    // Decode base64 QR data
    const { deviceId, sessionId } = decodeQRData(qrData);
    try {
        const existingStation = await Station.findOne({ deviceId });
        if (existingStation) {
            existingStation.username = username;
            existingStation.password = password;
            existingStation.deleted = false;
            existingStation.location = location;
            existingStation.createdAt = new Date();
            await existingStation.save();

            return res.status(200).json({
                status: 'success',
                message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ'
            });
        }

        //Additional check: is the password encrypted
        const hashedPassword = await bcrypt.hash(password, 10);

        const station = new Station({
            deviceId,
            location,
            username,
            password: password,
            createdAt: new Date()
        });
        await station.save();
        // event "registration"
        await registerEvent({
            eventType: "registration",
            description: `–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è ${deviceId} –¥–æ–±–∞–≤–ª–µ–Ω–∞.`
        });

        return res.status(200).json({
            status: 'success',
            message: '–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
        });
    } catch (error) {
        // event "error"
        await registerEvent({
            eventType: "incident",
            description: `–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ ${deviceId}.`
        });
        console.error('Error in /api/qr/add:', error);
        res.status(500).json({
            status: 'error',
            message: error.message || 'Internal Server Error'
        });
    }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è
const registerEvent = async ({ eventType, description }) => {
    try {
        const event = new Event({
            eventType,
            description,
        });

        await event.save();
        return event;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è:", err);
        throw err;
    }
};

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è
app.post("/api/front/events", async (req, res) => {
    const { eventType, description } = req.body;
    try {
        // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
        const event = await registerEvent({ eventType, description });
        res.status(201).json({ message: "Event recorded successfully", event });
    } catch (error) {
        console.error("Error in /api/front/events:", error);
        res.status(500).json({ error: "Internal server error" });
    }
});

//—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω–∏—è
const logDeletion = async (Model, item) => {
    let description = "";

    switch (Model.modelName) {
        case "User": {
            const user = await User.findById(item._id);
            if (user) {
                description = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} ${user.lastName || ""} (Telegram ID: ${user.telegramId}) –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            } else {
                description = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            }
            break;
        }
        case "Station": {
            const station = await Station.findById(item._id);
            if (station) {
                description = `–°—Ç–∞–Ω—Ü–∏—è ${station.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} (IP: ${station.ip || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}) –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            } else {
                description = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            }
            break;
        }
        case "Counterparty": {
            const —Åounterparty = await Counterparty.findById(item._id);
            if (—Åounterparty) {
                description = `–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ${—Åounterparty.fullName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} (Id: ${—Åounterparty.counterpartyId || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}) –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            } else {
                description = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            }
            break;
        }
        default:
            description = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ ${Model.modelName} –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`;
            break;
    }

    await registerEvent({
        eventType: "soft_delete",
        description
    });
};

const logPermanentDeletion = async (Model, item) => {
    let description = "";
    switch (Model.modelName) {
        case "User": {
            description = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${item.firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} ${item.lastName || ""} (Telegram ID: ${item.telegramId}) –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω.`;
            break;
        }
        case "Station": {
            description = `–°—Ç–∞–Ω—Ü–∏—è ${item.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} (IP: ${item.ip || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}) –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞.`;
            break;
        }
        case "Counterparty": {
            description = `–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ${item.fullName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} (Id: ${item.counterpartyId || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}) –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω.`;
            break;
        }
        default:
            description = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ ${Model.modelName} –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω.`;
            break;
    }

    await registerEvent({
        eventType: "full_delete",
        description
    });
};
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const handleAdminRoute = (Model, resourceName, additionalFilter = {}) => async (req, res) => {
    try {
        let filter = req.query.filter ? JSON.parse(req.query.filter) : {};
        filter = { ...filter, ...additionalFilter };

        const now = new Date();

        // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        const timezoneOffset = req.headers["x-timezone-offset"] ? parseInt(req.headers["x-timezone-offset"]) * 60000 : 0;
        
        // –ü—Ä–∏–≤–æ–¥–∏–º `now` –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ `startOfDay()`
        const userNow = new Date(now.getTime() - timezoneOffset);

        // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º (—Å–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü)
        if (filter.dateRange) {
            let start, end;
            switch (filter.dateRange) {
                case 'today':
                    start = new Date(startOfDay(userNow).getTime() + timezoneOffset).toISOString();
                    end = new Date(endOfDay(userNow).getTime() + timezoneOffset).toISOString();
                    break;
                case 'week':
                    start = new Date(startOfWeek(userNow, { weekStartsOn: 1 }).getTime() + timezoneOffset).toISOString();
                    end = new Date(endOfDay(userNow).getTime() + timezoneOffset).toISOString();
                    break;
                case 'month':
                    start = new Date(startOfMonth(userNow).getTime() + timezoneOffset).toISOString();
                    end = new Date(endOfDay(userNow).getTime() + timezoneOffset).toISOString();
                    break;
                default:
                    break;
            }

            if (start && end) {
                filter.createdAt = { $gte: start, $lte: end };
            }

            delete filter.dateRange;
        }

        // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        if (filter.startDate || filter.endDate) {
            let startDate = filter.startDate ? new Date(startOfDay(new Date(filter.startDate)).getTime() + timezoneOffset).toISOString() : null;
            let endDate = filter.endDate ? new Date(endOfDay(new Date(filter.endDate)).getTime() + timezoneOffset).toISOString() : null;

            filter.createdAt = {};
            if (startDate) filter.createdAt.$gte = startDate;
            if (endDate) filter.createdAt.$lte = endDate;

            delete filter.startDate;
            delete filter.endDate;
        }

        // üîπ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞—Ç—ã –≤–µ—Ä–Ω—ã–µ
        // console.log("–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (UTC):", filter.createdAt);

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ id –≤ _id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞–Ω—Ü–∏—è—Ö
        if (filter.id) {
            filter._id = filter.id;
            delete filter.id;
        }

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É       
        if (filter.q && filter.searchField) {
            if (filter.searchField === "id" || filter.searchField === "_id") {
                if (mongoose.Types.ObjectId.isValid(filter.q) && filter.q.length === 24) {
                    // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ObjectId
                    filter._id = new mongoose.Types.ObjectId(filter.q);
                } else {
                    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ ObjectId –∫–∞–∫ —Å—Ç—Ä–æ–∫–µ
                    filter.$expr = { $regexMatch: { input: { $toString: "$_id" }, regex: filter.q, options: "i" } };
                }
            } else {
                // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º (username, email –∏ —Ç.–¥.)
                filter[filter.searchField] = { $regex: filter.q, $options: "i" };
            }
        
            delete filter.q;
            delete filter.searchField;
        }  

        if (filter.deleted === undefined) {
            filter.deleted = false; 
        }

        if (Model.modelName === "Registration") {
            let existingRecords = await Model.find();

            if (existingRecords.length === 0) {
                const newRecord = new Model(); 
                await newRecord.save();
                existingRecords = [newRecord];
            }

            // üîπ –£–±–∏—Ä–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞
            res.set("Content-Range", `registration 0-1/1`);
            res.set("Access-Control-Expose-Headers", "Content-Range");
            return res.json(existingRecords);
        }

        // –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
        const [start, end] = req.query.range ? JSON.parse(req.query.range) : [0, 9];
        let [sortField, sortOrder] = req.query.sort ? JSON.parse(req.query.sort) : ["id", "ASC"];
        if (sortField === "id") sortField = "_id";

        const total = await Model.countDocuments(filter);
        const items = await Model.find(filter)
            .sort({ [sortField]: sortOrder === "ASC" ? 1 : -1 })
            .skip(start)
            .limit(end - start + 1);

        res.set('Content-Range', `${resourceName} ${start}-${Math.min(end, total)}/${total}`);
        res.set('Access-Control-Expose-Headers', 'Content-Range');
        res.json(items);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ error: error.message });
    }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ CRUD-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const handleGetOne = (Model) => async (req, res) => {
    try {
        const item = await Model.findById(req.params.id);
        if (!item) return res.status(404).json({ error: "Not found" });
        res.json(item);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};


const handleCreate = (Model) => async (req, res) => {
    try {
        // Hashing password
        let data = req.body;
        if (data.password) {
            data.password = await bcrypt.hash(data.password, 10)
        }

        const item = new Model(req.body);
        await item.save();
        res.status(201).json(item);
    } catch (error) {
        if (error.code === 11000) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥—É–±–ª–∏–∫–∞—Ç)
            return res.status(400).json({ error: "–∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
        }
        res.status(400).json({ error: error.message });
    }
};

const handleUpdate = (Model) => async (req, res) => {
    try {
        // Hashing password
        let data = req.body;
        if(data.password) {
            data.password = await bcrypt.hash(data.password, 10);
        }

        const item = await Model.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!item) return res.status(404).json({ error: "Not found" });
        res.json(item);
    } catch (error) {
        if (error.code === 11000) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥—É–±–ª–∏–∫–∞—Ç)
            return res.status(400).json({ error: "–∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
        }
        res.status(500).json({ error: error.message });
    }
};

const handleDelete = (Model) => async (req, res) => {
    try {
        const item = await Model.findByIdAndUpdate(
            req.params.id,
            { deleted: true },
            { new: true }
        );
        if (!item) return res.status(404).json({ error: "Not found" });

        // –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if (Model.modelName !== "Event") {await logDeletion(Model, item)}
    
        res.json({ message: "–£–¥–∞–ª–µ–Ω–æ (soft delete)", item });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

const handleRestore = (Model) => async (req, res) => {
    try {
        const item = await Model.findByIdAndUpdate(
            req.params.id,
            { deleted: false },
            { new: true }
        );
        if (!item) return res.status(404).json({ error: "Not found" });
        res.json({ message: "Restored successfully", item });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

const handlePermanentDelete = (Model) => async (req, res) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ (telegramId –∏ _id)
        const item = await Model.findById(req.params.id);
        if (!item) return res.status(404).json({ error: "Not found" });       
        
        // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏–∑ –±–∞–∑—ã
        await Model.findByIdAndDelete(req.params.id);
        // –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if (Model.modelName !== "Event") {await logPermanentDeletion(Model, item)}
        
        
        res.json({ message: "–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (–Ω–µ—É–¥–∞–ª—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
app.get("/api/admin/users", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].view), 
    handleAdminRoute(User, "users"));
app.get("/api/admin/users/:id", 
    handleGetOne(User, "users"));
app.post("/api/admin/users", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].create), 
    handleCreate(User));
app.put("/api/admin/users/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].edit), 
    handleUpdate(User));
app.delete("/api/admin/users/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].delete), 
    handleDelete(User));  // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ

app.get("/api/admin/events", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"].view), 
    handleAdminRoute(Event, "events"));
app.get("/api/admin/events/:id", 
    handleGetOne(Event, "events"));
app.delete("/api/admin/events/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"].delete), 
    handleDelete(Event));  // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ

app.get("/api/admin/stations", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].view), 
    handleAdminRoute(Station, "stations"));
app.get("/api/admin/stations/:id", 
    handleGetOne(Station));
app.post("/api/admin/stations", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].create), 
    handleCreate(Station));
app.put("/api/admin/stations/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].edit), 
    handleUpdate(Station));
app.delete("/api/admin/stations/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].delete), 
    handleDelete(Station));  // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ

app.get("/api/admin/counterparts", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].view), 
    handleAdminRoute(Counterparty, "counterparts"));
app.get("/api/admin/counterparts/:id", 
    handleGetOne(Counterparty));
app.post("/api/admin/counterparts", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].create), 
    handleCreate(Counterparty));
app.put("/api/admin/counterparts/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].edit), 
    handleUpdate(Counterparty));
app.delete("/api/admin/counterparts/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].delete), 
    handleDelete(Counterparty));  // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ

app.get("/api/admin/registration", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"].view), 
    handleAdminRoute(Registration, "registration"));
app.get("/api/admin/registration/:id", 
    handleGetOne(Registration));
app.put("/api/admin/registration/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"].edit), 
    handleUpdate(Registration));

app.get("/api/admin/lockUsers", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"].view), 
    handleAdminRoute(LockUsers, "lockUsers"));

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π (—Ç–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
app.get("/api/admin/UsersTrash", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].view), 
    handleAdminRoute(User, "users", { deleted: true }));
app.get("/api/admin/EventsTrash", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"].view),  
    handleAdminRoute(Event, "events", { deleted: true }));
app.get("/api/admin/StationsTrash", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].view), 
    handleAdminRoute(Station, "stations", { deleted: true }));
app.get("/api/admin/counterpartyTrash", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].view), 
    handleAdminRoute(Counterparty, "counterparts", { deleted: true }));

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.post("/api/admin/trash/users/:id/restore", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].delete), 
    handleRestore(User));
app.post("/api/admin/trash/events/:id/restore", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"].delete), 
    handleRestore(Event));
app.post("/api/admin/trash/stations/:id/restore", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].delete), 
    handleRestore(Station));
app.post("/api/admin/trash/counterparts/:id/restore", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].delete), 
    handleRestore(Counterparty));

// –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.delete("/api/admin/usersTrash/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"].delete), 
    handlePermanentDelete(User));
app.delete("/api/admin/eventsTrash/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"].delete), 
    handlePermanentDelete(Event));
app.delete("/api/admin/stationsTrash/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–°—Ç–∞–Ω—Ü–∏–∏"].delete), 
    handlePermanentDelete(Station));
app.delete("/api/admin/counterpartyTrash/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã"].delete), 
    handlePermanentDelete(Counterparty));
app.delete("/api/admin/lockUsers/:id", 
    checkPermissionsMiddleware(PERMISSIONS_MODULES["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"].edit), 
    handlePermanentDelete(LockUsers));

app.listen(8000, () => console.log('Backend running on port 8000'));